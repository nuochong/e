(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{2301:function(t,s,a){"use strict";a.r(s);var e=a(3),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"实现目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现目标"}},[t._v("#")]),t._v(" 实现目标")]),t._v(" "),e("p",[t._v("本地 push 代码到 GitHub，Webhook 自动触发 jenkins 上的构建动作,完成安装 node 插件并且打包，然后通过 Publish Over SSH 插件，将打包出来的文件，部署到目标服务器上。")]),t._v(" "),e("h2",{attrs:{id:"前期准备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前期准备"}},[t._v("#")]),t._v(" 前期准备")]),t._v(" "),e("ol",[e("li",[t._v("github 账号和项目")]),t._v(" "),e("li",[t._v("centos 服务器;")]),t._v(" "),e("li",[t._v("服务器安装 Java SDK;")]),t._v(" "),e("li",[t._v("服务器安装 nginx + 启动；")]),t._v(" "),e("li",[t._v("服务器安装 jenkins + 启动；")])]),t._v(" "),e("h2",{attrs:{id:"jenkins-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-介绍"}},[t._v("#")]),t._v(" jenkins 介绍")]),t._v(" "),e("p",[t._v("Jenkins 是开源的,使用 Java 编写的持续集成的工具，在 Centos 上可以通过 yum 命令行直接安装。Jenkins 只是一个平台，真正运作的都是插件。这就是 jenkins 流行的原因，因为 jenkins 什么插件都有。")]),t._v(" "),e("h3",{attrs:{id:"首先登录服务器更新系统软件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#首先登录服务器更新系统软件"}},[t._v("#")]),t._v(" 首先登录服务器更新系统软件")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ yum update\n")])])]),e("h3",{attrs:{id:"安装-java-和-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-java-和-git"}},[t._v("#")]),t._v(" 安装 Java 和 git")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ yum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" java\n$ yum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n")])])]),e("h3",{attrs:{id:"安装-nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-nginx"}},[t._v("#")]),t._v(" 安装 nginx")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ yum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" nginx //安装\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx start //启动\n")])])]),e("p",[t._v("出现 Redirecting to /bin/systemctl start nginx.service")]),t._v(" "),e("p",[t._v("说明 nginx 已经启动成功了，访问http://你的ip/，如果成功安装会出来nginx默认的欢迎界面")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(708),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("h3",{attrs:{id:"安装-jenkins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-jenkins"}},[t._v("#")]),t._v(" 安装 Jenkins")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n\n$ yum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" jenkins //完成之后直接使用 yum 命令安装 Jenkins\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" jenkins restart  //启动 jenkins\n")])])]),e("p",[t._v("jenkins 启动成功后默认的是 8080 端口，浏览器输入你的服务器 ip 地址加 8080 端口就可以访问了。")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(719),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("输入 cat /var/lib/jenkins/secrets/initialAdminPassword 查看初始密码")]),t._v(" "),e("p",[t._v("这里我们选择推荐通用插件安装即可，选择后等待完成插件安装以及初始化账户")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(723),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("figure",[e("img",{attrs:{src:a(724),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("figure",[e("img",{attrs:{src:a(725),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("然后安装两个推荐的插件 Rebuilder\nSafeRestart")]),t._v(" "),e("h2",{attrs:{id:"在-jenkins-中安装-nodejs-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-jenkins-中安装-nodejs-插件"}},[t._v("#")]),t._v(" 在 jenkins 中安装 nodeJs 插件")]),t._v(" "),e("p",[t._v("因为我们的项目是要用到 node 打包的，所以先在 jenkins 中安装 nodeJs 插件，安装后进入全局工具配置，配置一个我们要用到的 node 版本。")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(726),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("figure",[e("img",{attrs:{src:a(727),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("h2",{attrs:{id:"创建任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建任务"}},[t._v("#")]),t._v(" 创建任务")]),t._v(" "),e("p",[t._v("点击创建一个新任务")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(728),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("figure",[e("img",{attrs:{src:a(729),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("jenkins 关联 GitHub 项目地址")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(709),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("选择构建环境并编写 shell 命令")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(710),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("配置完成后点击立即构建，等待构建完，点击工作空间，可以发现已经多出一个打包后的 dist 目录。点击控制台输出可以查看详细构建 log")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(711),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("figure",[e("img",{attrs:{src:a(712),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("figure",[e("img",{attrs:{src:a(713),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("到这里已经实现了本地代码提交到 github，然后在 jenkins 上点击构建，可以拉取代码并且打包，下一步实现打包后的 dist 目录放到目标服务器上。")]),t._v(" "),e("h2",{attrs:{id:"安装-publish-over-ssh-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-publish-over-ssh-插件"}},[t._v("#")]),t._v(" 安装 Publish Over SSH 插件")]),t._v(" "),e("p",[t._v("我们将通过这个工具实现服务器部署功能。")]),t._v(" "),e("p",[t._v("安装完成后在 "),e("code",[t._v("系统管理 -> 系统设置 -> Publish over SSH")]),t._v(" 里设置服务器信息")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Passphrase：密码（key的密码，没设置就是空）\nPath to key：key文件（私钥）的路径\nKey：将私钥复制到这个框中(path to key和key写一个即可)\n\nSSH Servers的配置：\nSSH Server Name：标识的名字（随便你取什么）\nHostname：需要连接ssh的主机名或ip地址（建议ip）\nUsername：用户名\nRemote Directory：远程目录（上面第二步建的testjenkins文件夹的路径）\n\n高级配置：\nUse password authentication, or use a different key：勾选这个可以使用密码登录，不想配ssh的可以用这个先试试\nPassphrase / Password：密码登录模式的密码\nPort：端口（默认22）\nTimeout (ms)：超时时间（毫秒）默认300000\n")])])]),e("p",[t._v("这里配置的是账号密码登录，填写完后点击 test，出现 Success 说明配置成功")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(714),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("在刚才的 testJenkins 工程中配置构建后操作，选择 send build artificial over SSH， 参数说明：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Name:选择一个你配好的ssh服务器\nSource files ：写你要传输的文件路径\nRemove prefix ：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致\nRemote directory ：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录\nExec command ：传输完了要执行的命令，我这里执行了进入test目录,解压缩,解压缩完成后删除压缩包三个命令\n")])])]),e("p",[t._v("注意在构建中添加压缩 dist 目录命令")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(715),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("填完后执行构建。成功后登录我们目标服务器发现 test 目录下有了要运行的文件")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(716),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("访问域名发现项目可以访问了")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(717),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("接下来实现开发本地 push 代码到 github 上后，触发 Webhook，jenkins 自动执行构建。")]),t._v(" "),e("p",[t._v("jenkins 安装 Generic Webhook Trigger 插件\ngithub 添加触发器")]),t._v(" "),e("h2",{attrs:{id:"配置方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置方法"}},[t._v("#")]),t._v(" 配置方法")]),t._v(" "),e("p",[t._v("1.在刚才的 testJenkins 工程中点击构建触发器中选择 Generic Webhook Trigger，填写 token")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(718),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("2.github 配置 Webhook\n选择 github 项目中的 Settings->Webhooks>add webhook\n配置方式按上图红框中的格式，选择在 push 代码时触发 webhook，成功后会在下方出现一个绿色的小勾勾")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(720),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("测试一下，把 vue 项目首页的 9900 去了，然后 push 代码去 github，发现 Jenkins 中的构建已经自动执行，")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(721),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("查看页面也是 ok 的")]),t._v(" "),e("figure",[e("img",{attrs:{src:a(722),alt:""}}),e("figcaption",[t._v("章节配图")])]),t._v(" "),e("p",[t._v("一套简单的前端自动化工作流就搭建完成，是选择代码 push 后在 Jenkins 中手动构建，还是 push 后自动构建，看公司情况使用")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/U1HkHkAf73LFTPi5axh9BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("让 Jenkins 帮你自动布署 Vue 项目"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);