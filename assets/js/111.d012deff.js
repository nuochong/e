(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{2299:function(t,a,s){"use strict";s.r(a);var e=s(4),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("git 对于大家应该都不太陌生，熟练使用 git 已经成为程序员的一项基本技能，尽管在工作中有诸如 "),s("code",[t._v("Sourcetree")]),t._v(" 这样牛 X 的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的 git 命令。")]),t._v(" "),s("p",[t._v("下边我们整理了 45 个日常用 git 合代码的经典操作场景，基本覆盖了工作中的需求。")]),t._v(" "),s("h2",{attrs:{id:"我刚才提交了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我刚才提交了什么"}},[t._v("#")]),t._v(" 我刚才提交了什么?")]),t._v(" "),s("p",[t._v("如果你用 "),s("code",[t._v("git commit -a")]),t._v(" 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前 "),s("code",[t._v("HEAD")]),t._v(" 上的最近一次的提交(commit):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -n1 -p\n")])])]),s("h2",{attrs:{id:"我的提交信息-commit-message-写错了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我的提交信息-commit-message-写错了"}},[t._v("#")]),t._v(" 我的提交信息(commit message)写错了")]),t._v(" "),s("p",[t._v("如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend --only\n")])])]),s("p",[t._v("这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend --only -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxxxxx'")]),t._v("\n")])])]),s("p",[t._v("如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。")]),t._v(" "),s("h2",{attrs:{id:"我提交-commit-里的用户名和邮箱不对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我提交-commit-里的用户名和邮箱不对"}},[t._v("#")]),t._v(" 我提交(commit)里的用户名和邮箱不对")]),t._v(" "),s("p",[t._v("如果这只是单个提交(commit)，修改它：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend --author "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New Authorname <authoremail@mydomain.com>"')]),t._v("\n")])])]),s("p",[t._v("如果你需要修改所有历史, 参考 'git filter-branch’的指南页.")]),t._v(" "),s("h2",{attrs:{id:"我想从一个提交-commit-里移除一个文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想从一个提交-commit-里移除一个文件"}},[t._v("#")]),t._v(" 我想从一个提交(commit)里移除一个文件")]),t._v(" "),s("p",[t._v("通过下面的方法，从一个提交(commit)里移除一个文件:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout HEAD^ myfile\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("p",[t._v("这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。")]),t._v(" "),s("h2",{attrs:{id:"我想删除我的的最后一次提交-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想删除我的的最后一次提交-commit"}},[t._v("#")]),t._v(" 我想删除我的的最后一次提交(commit)")]),t._v(" "),s("p",[t._v("如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^ --hard\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("如果你还没有推到远程, 把 Git 重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 "),s("code",[t._v("git revert SHAofBadCommit")]),t._v("， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是 rebase-safe 的 (例如：其它开发者不会从这个分支拉), 只需要使用 "),s("code",[t._v("git push -f")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"删除任意提交-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除任意提交-commit"}},[t._v("#")]),t._v(" 删除任意提交(commit)")]),t._v(" "),s("p",[t._v("同样的警告：不到万不得已的时候不要这么做.")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("或者做一个 交互式 rebase 删除那些你想要删除的提交(commit)里所对应的行。")]),t._v(" "),s("h2",{attrs:{id:"我尝试推一个修正后的提交-amended-commit-到远程-但是报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我尝试推一个修正后的提交-amended-commit-到远程-但是报错"}},[t._v("#")]),t._v(" 我尝试推一个修正后的提交(amended commit)到远程，但是报错：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("To https://github.com/yourusername/repo.git\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rejected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        mybranch -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mybranch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("non-fast-forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nerror: failed to push some refs to "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://github.com/tanay1337/webmaker.org.git'")]),t._v("\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g.\nhint: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git pull ...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" before pushing again.\nhint: See the "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Note about fast-forwards'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git push --help'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" details.\n")])])]),s("p",[t._v("注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) ("),s("code",[t._v("-f")]),t._v(")。注意 – 总是 确保你指明一个分支!")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin mybranch -f\n")])])]),s("p",[t._v("一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。")]),t._v(" "),s("h2",{attrs:{id:"我意外的做了一次硬重置-hard-reset-我想找回我的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我意外的做了一次硬重置-hard-reset-我想找回我的内容"}},[t._v("#")]),t._v(" 我意外的做了一次硬重置(hard reset)，我想找回我的内容")]),t._v(" "),s("p",[t._v("如果你意外的做了 "),s("code",[t._v("git reset --hard")]),t._v(", 你通常能找回你的提交(commit), 因为 Git 对每件事都会有日志，且都会保存几天。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n")])])]),s("p",[t._v("你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的 SHA，再重置一次:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard SHA1234\n")])])]),s("p",[t._v("这样就完成了。")]),t._v(" "),s("h2",{attrs:{id:"暂存-staging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存-staging"}},[t._v("#")]),t._v(" 暂存(Staging)")]),t._v(" "),s("h3",{attrs:{id:"我需要把暂存的内容添加到上一次的提交-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我需要把暂存的内容添加到上一次的提交-commit"}},[t._v("#")]),t._v(" 我需要把暂存的内容添加到上一次的提交(commit)")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("h3",{attrs:{id:"我想要暂存一个新文件的一部分-而不是这个文件的全部"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想要暂存一个新文件的一部分-而不是这个文件的全部"}},[t._v("#")]),t._v(" 我想要暂存一个新文件的一部分，而不是这个文件的全部")]),t._v(" "),s("p",[t._v("一般来说, 如果你想暂存一个文件的一部分, 你可这样做:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --patch filename.x\n")])])]),s("p",[s("code",[t._v("-p")]),t._v(" 简写。这会打开交互模式， 你将能够用 "),s("code",[t._v("s")]),t._v(" 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -N filename.x\n")])])]),s("p",[t._v("然后, 你需要用 "),s("code",[t._v("e")]),t._v(" 选项来手动选择需要添加的行，执行 "),s("code",[t._v("git diff --cached")]),t._v(" 将会显示哪些行暂存了哪些行只是保存在本地了。")]),t._v(" "),s("h3",{attrs:{id:"我想把在一个文件里的变化-changes-加到两个提交-commit-里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想把在一个文件里的变化-changes-加到两个提交-commit-里"}},[t._v("#")]),t._v(" 我想把在一个文件里的变化(changes)加到两个提交(commit)里")]),t._v(" "),s("p",[s("code",[t._v("git add")]),t._v(" 会把整个文件加入到一个提交. "),s("code",[t._v("git add -p")]),t._v(" 允许交互式的选择你想要提交的部分.")]),t._v(" "),s("h3",{attrs:{id:"我想把暂存的内容变成未暂存-把未暂存的内容暂存起来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想把暂存的内容变成未暂存-把未暂存的内容暂存起来"}},[t._v("#")]),t._v(" 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来")]),t._v(" "),s("p",[t._v("多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行 commit。但假定你就是想要这么做，这里你可以创建一个临时的 commit 来保存你已暂存的内容，然后暂存你的未暂存的内容并进行 stash。然后 reset 最后一个 commit 将原本暂存的内容变为未暂存，最后 stash pop 回来。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"WIP"')]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop --index "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("p",[t._v("注意 1: 这里使用 "),s("code",[t._v("pop")]),t._v(" 仅仅是因为想尽可能保持幂等。注意 2: 假如你不加上 "),s("code",[t._v("--index")]),t._v(" 你会把暂存的文件标记为为存储。")]),t._v(" "),s("h2",{attrs:{id:"未暂存-unstaged-的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未暂存-unstaged-的内容"}},[t._v("#")]),t._v(" 未暂存(Unstaged)的内容")]),t._v(" "),s("h3",{attrs:{id:"我想把未暂存的内容移动到一个新分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想把未暂存的内容移动到一个新分支"}},[t._v("#")]),t._v(" 我想把未暂存的内容移动到一个新分支")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b my-branch\n")])])]),s("h3",{attrs:{id:"我想把未暂存的内容移动到另一个已存在的分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想把未暂存的内容移动到另一个已存在的分支"}},[t._v("#")]),t._v(" 我想把未暂存的内容移动到另一个已存在的分支")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout my-branch\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n")])])]),s("h3",{attrs:{id:"我想丢弃本地未提交的变化-uncommitted-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想丢弃本地未提交的变化-uncommitted-changes"}},[t._v("#")]),t._v(" 我想丢弃本地未提交的变化(uncommitted changes)")]),t._v(" "),s("p",[t._v("如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# one commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# two commits")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^^\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# four commits")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~4\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -f\n")])])]),s("p",[t._v("重置某个特殊的文件, 你可以用文件名做为参数:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset filename\n")])])]),s("h3",{attrs:{id:"我想丢弃某些未暂存的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想丢弃某些未暂存的内容"}},[t._v("#")]),t._v(" 我想丢弃某些未暂存的内容")]),t._v(" "),s("p",[t._v("如果你想丢弃工作拷贝中的一部分内容，而不是全部。")]),t._v(" "),s("p",[t._v("签出(checkout)不需要的内容，保留需要的。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -p\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Answer y to all of the snippets you want to drop")]),t._v("\n")])])]),s("p",[t._v("另外一个方法是使用 "),s("code",[t._v("stash")]),t._v("， Stash 所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash -p\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Select all of the snippets you want to save")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n")])])]),s("p",[t._v("或者, stash 你不需要的部分, 然后 stash drop。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash -p\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Select all of the snippets you don't want to save")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop\n")])])]),s("h2",{attrs:{id:"分支-branches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支-branches"}},[t._v("#")]),t._v(" 分支(Branches)")]),t._v(" "),s("h3",{attrs:{id:"我从错误的分支拉取了内容-或把内容拉取到了错误的分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我从错误的分支拉取了内容-或把内容拉取到了错误的分支"}},[t._v("#")]),t._v(" 我从错误的分支拉取了内容，或把内容拉取到了错误的分支")]),t._v(" "),s("p",[t._v("这是另外一种使用 "),s("code",[t._v("git reflog")]),t._v(" 情况，找到在这次错误拉(pull) 之前 HEAD 的指向。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\nab7555f HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": pull origin wrong-branch: Fast-forward\nc5bc55a HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": checkout: checkout message goes here\n")])])]),s("p",[t._v("重置分支到你所需的提交(desired commit):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard c5bc55a\n")])])]),s("p",[t._v("完成。")]),t._v(" "),s("h3",{attrs:{id:"我想扔掉本地的提交-commit-以便我的分支与远程的保持一致"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想扔掉本地的提交-commit-以便我的分支与远程的保持一致"}},[t._v("#")]),t._v(" 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致")]),t._v(" "),s("p",[t._v("先确认你没有推(push)你的内容到远程。")]),t._v(" "),s("p",[s("code",[t._v("git status")]),t._v(" 会显示你领先(ahead)源(origin)多少个提交:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch my-branch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Your branch is ahead of 'origin/my-branch' by 2 commits.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git push" to publish your local commits)')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])]),s("p",[t._v("一种方法是:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard origin/my-branch\n")])])]),s("h3",{attrs:{id:"我需要提交到一个新分支-但错误的提交到了-main"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我需要提交到一个新分支-但错误的提交到了-main"}},[t._v("#")]),t._v(" 我需要提交到一个新分支，但错误的提交到了 main")]),t._v(" "),s("p",[t._v("在 main 下创建一个新分支，不切换到新分支,仍在 main 下:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch my-branch\n")])])]),s("p",[t._v("把 main 分支重置到前一个提交:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\n")])])]),s("p",[s("code",[t._v("HEAD^")]),t._v(" 是 "),s("code",[t._v("HEAD^1")]),t._v(" 的简写，你可以通过指定要设置的 "),s("code",[t._v("HEAD")]),t._v(" 来进一步重置。")]),t._v(" "),s("p",[t._v("或者, 如果你不想使用 "),s("code",[t._v("HEAD^")]),t._v(", 找到你想重置到的提交(commit)的 hash("),s("code",[t._v("git log")]),t._v(" 能够完成)， 然后重置到这个 hash。使用 "),s("code",[t._v("git push")]),t._v(" 同步内容到远程。")]),t._v(" "),s("p",[t._v("例如, main 分支想重置到的提交的 hash 为 "),s("code",[t._v("a13b85e")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard a13b85e\nHEAD is now at a13b85e\n")])])]),s("p",[t._v("签出(checkout)刚才新建的分支继续工作:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout my-branch\n")])])]),s("h3",{attrs:{id:"我想保留来自另外一个-ref-ish-的整个文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想保留来自另外一个-ref-ish-的整个文件"}},[t._v("#")]),t._v(" 我想保留来自另外一个 ref-ish 的整个文件")]),t._v(" "),s("p",[t._v("假设你正在做一个原型方案(原文为 working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:")]),t._v(" "),s("p",[t._v("(solution)$ git add -A && git commit -m “Adding all changes from this spike into one big commit.”\n当你想要把它放到一个分支里 (可能是 "),s("code",[t._v("feature")]),t._v(", 或者 "),s("code",[t._v("develop")]),t._v("), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。")]),t._v(" "),s("p",[t._v("假设你有:")]),t._v(" "),s("ul",[s("li",[t._v("分支 "),s("code",[t._v("solution")]),t._v(", 拥有原型方案， 领先 "),s("code",[t._v("develop")]),t._v(" 分支。")]),t._v(" "),s("li",[t._v("分支 "),s("code",[t._v("develop")]),t._v(", 在这里你应用原型方案的一些内容。\n我去可以通过把内容拿到你的分支里，来解决这个问题:")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("develop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout solution -- file1.txt\n")])])]),s("p",[t._v("这会把这个文件内容从分支 "),s("code",[t._v("solution")]),t._v(" 拿到分支 "),s("code",[t._v("develop")]),t._v(" 里来:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch develop")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Your branch is up-to-date with 'origin/develop'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  (use "git reset HEAD <file>..." to unstage)')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#        modified:   file1.txt")]),t._v("\n")])])]),s("p",[t._v("然后, 正常提交。")]),t._v(" "),s("p",[t._v("Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.")]),t._v(" "),s("h3",{attrs:{id:"我把几个提交-commit-提交到了同一个分支-而这些提交应该分布在不同的分支里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我把几个提交-commit-提交到了同一个分支-而这些提交应该分布在不同的分支里"}},[t._v("#")]),t._v(" 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里")]),t._v(" "),s("p",[t._v("假设你有一个 "),s("code",[t._v("main")]),t._v(" 分支， 执行 "),s("code",[t._v("git log")]),t._v(", 你看到你做过两次提交:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\ncommit e3851e817c451cc36f2e6f3049db528415e3c114\nAuthor: Alex Lee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("alexlee@example.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jul "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":39:27 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" -0400\n\n    Bug "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#21 - Added CSRF protection")]),t._v("\n\ncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131\nAuthor: Alex Lee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("alexlee@example.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jul "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":39:12 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" -0400\n\n    Bug "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#14 - Fixed spacing on title")]),t._v("\n\ncommit a13b85e984171c6e2a1729bb061994525f626d14\nAuthor: Aki Rose "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("akirose@example.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jul "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" 01:12:48 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" -0400\n\n    First commit\n")])])]),s("p",[t._v("让我们用提交 hash(commit hash)标记 bug ("),s("code",[t._v("e3851e8")]),t._v(" for #21, "),s("code",[t._v("5ea5173")]),t._v(" for #14).")]),t._v(" "),s("p",[t._v("首先, 我们把 "),s("code",[t._v("main")]),t._v(" 分支重置到正确的提交("),s("code",[t._v("a13b85e")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard a13b85e\nHEAD is now at a13b85e\n")])])]),s("p",[t._v("现在, 我们对 bug #21 创建一个新的分支:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$\n")])])]),s("p",[t._v("接着, 我们用 "),s("code",[t._v("cherry-pick")]),t._v(" 把对 bug #21 的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在 HEAD 上面。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick e3851e8\n")])])]),s("p",[t._v("这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.")]),t._v(" "),s("p",[t._v("再者， 我们为 bug #14 创建一个新的分支, 也基于 "),s("code",[t._v("main")]),t._v(" 分支")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$\n")])])]),s("p",[t._v("最后, 为 bug #14 执行 cherry-pick:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 5ea5173\n")])])]),s("h3",{attrs:{id:"我想删除上游-upstream-分支被删除了的本地分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想删除上游-upstream-分支被删除了的本地分支"}},[t._v("#")]),t._v(" 我想删除上游(upstream)分支被删除了的本地分支")]),t._v(" "),s("p",[t._v("一旦你在 github 上面合并(merge)了一个 pull request, 你就可以删除你 fork 里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（IDEA 中玩转 Git）。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch -p\n")])])]),s("h3",{attrs:{id:"我不小心删除了我的分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我不小心删除了我的分支"}},[t._v("#")]),t._v(" 我不小心删除了我的分支")]),t._v(" "),s("p",[t._v("如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b my-branch\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" foo.txt\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nREADME.md foo.txt\n")])])]),s("p",[t._v("添加文件并做一次提交")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo.txt added'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ foo.txt added\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" files changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" foo.txt\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\ncommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\nAuthor: siemiatj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("siemiatj@example.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Wed Jul "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" 00:34:10 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" +0200\n\n    foo.txt added\n\ncommit 69204cdf0acbab201619d95ad8295928e7f411d5\nAuthor: Kate Hudson "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("katehudson@example.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jul "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":14:46 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v(" -0400\n\n    Fixes "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#6: Force pushing after amending commits")]),t._v("\n")])])]),s("p",[t._v("现在我们切回到主(main)分支，‘不小心的’删除 "),s("code",[t._v("my-branch")]),t._v(" 分支")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\nSwitched to branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),t._v("\nYour branch is up-to-date with "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'origin/main'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D my-branch\nDeleted branch my-branch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was 4e3cd85"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" oh noes, deleted my branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\noh noes, deleted my branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),s("p",[t._v("在这时候你应该想起了 "),s("code",[t._v("reflog")]),t._v(", 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n69204cd HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": checkout: moving from my-branch to main\n4e3cd85 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit: foo.txt added\n69204cd HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": checkout: moving from main to my-branch\n")])])]),s("p",[t._v("正如你所见，我们有一个来自删除分支的提交 hash(commit hash)，接下来看看是否能恢复删除了的分支。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b my-branch-help\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-branch-help'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch-help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard 4e3cd85\nHEAD is now at 4e3cd85 foo.txt added\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch-help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nREADME.md foo.txt\n")])])]),s("p",[t._v("看! 我们把删除的文件找回来了。Git 的 "),s("code",[t._v("reflog")]),t._v(" 在 rebasing 出错的时候也是同样有用的。")]),t._v(" "),s("h3",{attrs:{id:"我想删除一个分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想删除一个分支"}},[t._v("#")]),t._v(" 我想删除一个分支")]),t._v(" "),s("p",[t._v("删除一个远程分支:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete my-branch\n")])])]),s("p",[t._v("你也可以:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :my-branch\n")])])]),s("p",[t._v("删除一个本地分支:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D my-branch\n")])])]),s("h3",{attrs:{id:"我想从别人正在工作的远程分支签出-checkout-一个分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想从别人正在工作的远程分支签出-checkout-一个分支"}},[t._v("#")]),t._v(" 我想从别人正在工作的远程分支签出(checkout)一个分支")]),t._v(" "),s("p",[t._v("首先, 从远程拉取(fetch) 所有分支:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --all\n")])])]),s("p",[t._v("假设你想要从远程的 "),s("code",[t._v("daves")]),t._v(" 分支签出到本地的 "),s("code",[t._v("daves")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --track origin/daves\nBranch daves "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track remote branch daves from origin.\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'daves'")]),t._v("\n")])])]),s("p",[t._v("("),s("code",[t._v("--track")]),t._v(" 是"),s("code",[t._v("git checkout -b [branch][remotename]/[branch]")]),t._v(" 的简写)")]),t._v(" "),s("p",[t._v("这样就得到了一个 "),s("code",[t._v("daves")]),t._v(" 分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.")]),t._v(" "),s("h2",{attrs:{id:"rebasing-和合并-merging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebasing-和合并-merging"}},[t._v("#")]),t._v(" Rebasing 和合并(Merging)")]),t._v(" "),s("h3",{attrs:{id:"我想撤销-rebase-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想撤销-rebase-merge"}},[t._v("#")]),t._v(" 我想撤销 rebase/merge")]),t._v(" "),s("p",[t._v("你可以合并(merge)或 rebase 了一个错误的分支, 或者完成不了一个进行中的 rebase/merge。Git 在进行危险操作的时候会把原始的 HEAD 保存在一个叫 ORIG_HEAD 的变量里, 所以要把分支恢复到 rebase/merge 前的状态是很容易的。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard ORIG_HEAD\n")])])]),s("h3",{attrs:{id:"我已经-rebase-过-但是我不想强推-force-push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我已经-rebase-过-但是我不想强推-force-push"}},[t._v("#")]),t._v(" 我已经 rebase 过, 但是我不想强推(force push)")]),t._v(" "),s("p",[t._v("不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了 Git 历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout my-branch\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i main\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --ff-only my-branch\n")])])]),s("h3",{attrs:{id:"我需要组合-combine-几个提交-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我需要组合-combine-几个提交-commit"}},[t._v("#")]),t._v(" 我需要组合(combine)几个提交(commit)")]),t._v(" "),s("p",[t._v("假设你的工作分支将会做对于 main 的 pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:")]),t._v(" "),s("p",[t._v("(my-branch)$ git reset --soft main\n(my-branch)$ git commit -am “New awesome feature”\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式 rebase (interactive rebase):")]),t._v(" "),s("p",[t._v("(my-branch)$ git rebase -i main\n如果没有相对的其它分支， 你将不得不相对自己的 "),s("code",[t._v("HEAD")]),t._v(" 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于 "),s("code",[t._v("HEAD~2")]),t._v(" 进行 rebase， 组合最近 3 次提交(commit), 相对于 "),s("code",[t._v("HEAD~3")]),t._v(", 等等。")]),t._v(" "),s("p",[t._v("(main)$ git rebase -i HEAD~2\n在你执行了交互式 rebase 的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("pick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\npick b729ad5 fixup\npick e3851e8 another fix\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Rebase 8074d12..b729ad5 onto 8074d12")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commands:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  p, pick = use commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  r, reword = use commit, but edit the commit message")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  e, edit = use commit, but stop for amending")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  s, squash = use commit, but meld into previous commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  f, fixup = like "squash", but discard this commit\'s log message')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  x, exec = run command (the rest of the line) using shell")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# These lines can be re-ordered; they are executed from top to bottom.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If you remove a line here THAT COMMIT WILL BE LOST.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# However, if you remove everything, the rebase will be aborted.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that empty commits are commented out")]),t._v("\n")])])]),s("p",[t._v("所有以 "),s("code",[t._v("#")]),t._v(" 开头的行都是注释, 不会影响 rebase.")]),t._v(" "),s("p",[t._v("然后，你可以用任何上面命令列表的命令替换 "),s("code",[t._v("pick")]),t._v(", 你也可以通过删除对应的行来删除一个提交(commit)。")]),t._v(" "),s("p",[t._v("例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 "),s("code",[t._v("f")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("pick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\nf b729ad5 fixup\nf e3851e8 another fix\n")])])]),s("p",[t._v("如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个 "),s("code",[t._v("r")]),t._v("，或者更简单的用 s 替代 "),s("code",[t._v("f")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("pick a9c8a1d Some refactoring\npick 01b2fd8 New awesome feature\ns b729ad5 fixup\ns e3851e8 another fix\n")])])]),s("p",[t._v("你可以在接下来弹出的文本提示框里重命名提交(commit)。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("Newer, awesomer features\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Please enter the commit message for your changes. Lines starting")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# with '#' will be ignored, and an empty message aborts the commit.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rebase in progress; onto 8074d12")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You are currently editing a commit while rebasing branch 'main' on '8074d12'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tmodified:   README.md")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])]),s("p",[t._v("如果成功了, 你应该看到类似下面的内容:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ Successfully rebased and updated refs/heads/main.\n")])])]),s("h3",{attrs:{id:"安全合并-merging-策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全合并-merging-策略"}},[t._v("#")]),t._v(" 安全合并(merging)策略")]),t._v(" "),s("p",[s("code",[t._v("--no-commit")]),t._v(" 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。no-ff 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多 Git 资料，参见 IDEA 中如何完成 Git 版本回退？）。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff --no-commit my-branch\n")])])]),s("h3",{attrs:{id:"我需要将一个分支合并成一个提交-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我需要将一个分支合并成一个提交-commit"}},[t._v("#")]),t._v(" 我需要将一个分支合并成一个提交(commit)")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --squash my-branch\n")])])]),s("h3",{attrs:{id:"我只想组合-combine-未推的提交-unpushed-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我只想组合-combine-未推的提交-unpushed-commit"}},[t._v("#")]),t._v(" 我只想组合(combine)未推的提交(unpushed commit)")]),t._v(" "),s("p",[t._v("有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这会产生一次交互式的 rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行 reorder/fix/squash 都是安全的。")]),t._v(" "),s("h3",{attrs:{id:"检查是否分支上的所有提交-commit-都合并-merge-过了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查是否分支上的所有提交-commit-都合并-merge-过了"}},[t._v("#")]),t._v(" 检查是否分支上的所有提交(commit)都合并(merge)过了")]),t._v(" "),s("p",[t._v("检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的 head(或任何 commits)之间做一次 diff:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --left-right --cherry-pick --oneline HEAD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".feature/120-on-scroll\n")])])]),s("p",[t._v("这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log main ^feature/120-on-scroll --no-merges\n")])])]),s("h3",{attrs:{id:"交互式-rebase-interactive-rebase-可能出现的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交互式-rebase-interactive-rebase-可能出现的问题"}},[t._v("#")]),t._v(" 交互式 rebase(interactive rebase)可能出现的问题")]),t._v(" "),s("p",[t._v("这个 rebase 编辑屏幕出现’noop’\n如果你看到的是这样:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("noop\n")])])]),s("p",[t._v("这意味着你 rebase 的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。你可以尝试:")]),t._v(" "),s("ul",[s("li",[t._v("检查确保主(main)分支没有问题")]),t._v(" "),s("li",[t._v("rebase "),s("code",[t._v("HEAD~2")]),t._v(" 或者更早")])]),t._v(" "),s("h3",{attrs:{id:"有冲突的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有冲突的情况"}},[t._v("#")]),t._v(" 有冲突的情况")]),t._v(" "),s("p",[t._v("如果你不能成功的完成 rebase, 你可能必须要解决冲突。")]),t._v(" "),s("p",[t._v("首先执行 "),s("code",[t._v("git status")]),t._v(" 找出哪些文件有冲突:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch my-branch\nChanges not staged "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <file>..."')]),t._v(" to update what will be committed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n modified:   README.md\n")])])]),s("p",[t._v("在这个例子里面, "),s("a",{attrs:{href:"http://README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("README.md"),s("OutboundLink")],1),t._v(" 有冲突。打开这个文件找到类似下面的内容:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HEAD\n   some code\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n   some code\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" new-commit\n")])])]),s("p",[t._v("你需要解决新提交的代码(示例里, 从中间 "),s("code",[t._v("==")]),t._v(" 线到 "),s("code",[t._v("new-commit")]),t._v(" 的地方)与 "),s("code",[t._v("HEAD")]),t._v(" 之间不一样的地方.")]),t._v(" "),s("p",[t._v("有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" mergetool -t opendiff\n")])])]),s("p",[t._v("在你解决完所有冲突和测试过后, git add 变化了的(changed)文件, 然后用 "),s("code",[t._v("git rebase --continue")]),t._v(" 继续 rebase。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n")])])]),s("p",[t._v("如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行 "),s("code",[t._v("git rebase --skip")]),t._v("。")]),t._v(" "),s("p",[t._v("任何时候你想结束整个 rebase 过程，回来 rebase 前的分支状态, 你可以做:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --abort\n")])])]),s("h2",{attrs:{id:"stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stash"}},[t._v("#")]),t._v(" Stash")]),t._v(" "),s("h3",{attrs:{id:"暂存所有改动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存所有改动"}},[t._v("#")]),t._v(" 暂存所有改动")]),t._v(" "),s("p",[t._v("暂存你工作目录下的所有改动")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n")])])]),s("p",[t._v("你可以使用-u 来排除一些文件")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash -u\n")])])]),s("h3",{attrs:{id:"暂存指定文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存指定文件"}},[t._v("#")]),t._v(" 暂存指定文件")]),t._v(" "),s("p",[t._v("假设你只想暂存某一个文件")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash push working-directory-path/filename.ext\n")])])]),s("p",[t._v("假设你想暂存多个文件")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash push working-directory-path/filename1.ext working-directory-path/filename2.ext\n")])])]),s("h3",{attrs:{id:"暂存时记录消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存时记录消息"}},[t._v("#")]),t._v(" 暂存时记录消息")]),t._v(" "),s("p",[t._v("这样你可以在 list 时看到它")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("或")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash push -m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h3",{attrs:{id:"使用某个指定暂存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用某个指定暂存"}},[t._v("#")]),t._v(" 使用某个指定暂存")]),t._v(" "),s("p",[t._v("首先你可以查看你的 "),s("code",[t._v("stash")]),t._v(" 记录")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n")])])]),s("p",[t._v("然后你可以 "),s("code",[t._v("apply")]),t._v(" 某个 "),s("code",[t._v("stash")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stash@{n}"')]),t._v("\n")])])]),s("p",[t._v("此处， 'n’是 "),s("code",[t._v("stash")]),t._v(" 在栈中的位置，最上层的 "),s("code",[t._v("stash")]),t._v(" 会是 0")]),t._v(" "),s("p",[t._v("除此之外，也可以使用时间标记(假如你能记得的话)。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stash@{2.hours.ago}"')]),t._v("\n")])])]),s("h3",{attrs:{id:"暂存时保留未暂存的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存时保留未暂存的内容"}},[t._v("#")]),t._v(" 暂存时保留未暂存的内容")]),t._v(" "),s("p",[t._v("你需要手动 create 一个 "),s("code",[t._v("stash commit")]),t._v("， 然后使用 "),s("code",[t._v("git stash store")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash create\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash store -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit-message"')]),t._v(" CREATED_SHA1\n")])])]),s("h2",{attrs:{id:"杂项-miscellaneous-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#杂项-miscellaneous-objects"}},[t._v("#")]),t._v(" 杂项(Miscellaneous Objects)")]),t._v(" "),s("h3",{attrs:{id:"克隆所有子模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆所有子模块"}},[t._v("#")]),t._v(" 克隆所有子模块")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --recursive git://github.com/foo/bar.git\n")])])]),s("p",[t._v("如果已经克隆了:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update --init --recursive\n")])])]),s("h3",{attrs:{id:"删除标签-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除标签-tag"}},[t._v("#")]),t._v(" 删除标签(tag)")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" :refs/tags/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h3",{attrs:{id:"恢复已删除标签-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#恢复已删除标签-tag"}},[t._v("#")]),t._v(" 恢复已删除标签(tag)")]),t._v(" "),s("p",[t._v("如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fsck")]),t._v(" --unreachable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" tag\n")])])]),s("p",[t._v("记下这个标签(tag)的 hash，然后用 Git 的 update-ref")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-ref refs/tags/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("这时你的标签(tag)应该已经恢复了。")]),t._v(" "),s("h3",{attrs:{id:"已删除补丁-patch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已删除补丁-patch"}},[t._v("#")]),t._v(" 已删除补丁(patch)")]),t._v(" "),s("p",[t._v("如果某人在 GitHub 上给你发了一个 pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 "),s("code",[t._v("git am")]),t._v("。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。")]),t._v(" "),s("p",[t._v("做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的 "),s("code",[t._v("pull request")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"跟踪文件-tracking-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跟踪文件-tracking-files"}},[t._v("#")]),t._v(" 跟踪文件(Tracking Files)")]),t._v(" "),s("h3",{attrs:{id:"我只想改变一个文件名字的大小写-而不修改内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我只想改变一个文件名字的大小写-而不修改内容"}},[t._v("#")]),t._v(" 我只想改变一个文件名字的大小写，而不修改内容")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" --force myfile MyFile\n")])])]),s("h3",{attrs:{id:"我想从-git-删除一个文件-但保留该文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想从-git-删除一个文件-但保留该文件"}},[t._v("#")]),t._v(" 我想从 Git 删除一个文件，但保留该文件")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached log.txt\n")])])]),s("h2",{attrs:{id:"配置-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-configuration"}},[t._v("#")]),t._v(" 配置(Configuration)")]),t._v(" "),s("h3",{attrs:{id:"我想给一些-git-命令添加别名-alias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想给一些-git-命令添加别名-alias"}},[t._v("#")]),t._v(" 我想给一些 Git 命令添加别名(alias)")]),t._v(" "),s("p",[t._v("在 OS X 和 Linux 下, 你的 Git 的配置文件储存在 "),s("code",[t._v("~/.gitconfig")]),t._v("。我在"),s("code",[t._v("[alias]")]),t._v(" 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\n    amend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit --amend\n    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit\n    ca "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit --amend\n    ci "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commit -a\n    co "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" checkout\n    d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --changed\n    ds "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --staged\n    f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fetch\n    loll "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log --graph --decorate --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit\n    m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" merge\n    one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\n    outstanding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rebase -i @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" status\n    unpushed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" log @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" whatchanged\n    wip "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rebase -i @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    zap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fetch -p\n")])])]),s("h3",{attrs:{id:"我想缓存一个仓库-repository-的用户名和密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我想缓存一个仓库-repository-的用户名和密码"}},[t._v("#")]),t._v(" 我想缓存一个仓库(repository)的用户名和密码")]),t._v(" "),s("p",[t._v("你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper 能帮你。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper cache\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set git to use the credential memory cache")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cache --timeout=3600'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set the cache to timeout after 1 hour (setting is in seconds)")]),t._v("\n")])])]),s("h3",{attrs:{id:"我不知道我做错了些什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我不知道我做错了些什么"}},[t._v("#")]),t._v(" 我不知道我做错了些什么")]),t._v(" "),s("p",[t._v("你把事情搞砸了：你 "),s("code",[t._v("重置(reset)")]),t._v(" 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。")]),t._v(" "),s("p",[t._v("这就是 "),s("code",[t._v("git reflog")]),t._v(" 的目的， "),s("code",[t._v("reflog")]),t._v(" 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次 HEAD 的改变, 一条新的记录就会增加到 "),s("code",[t._v("reflog")]),t._v(" 。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n0a2e358 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": reset: moving to HEAD~2\n0254ea7 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": checkout: moving from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.2")]),t._v(" to main\nc10f740 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": checkout: moving from main to "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.2")]),t._v("\n")])])]),s("p",[t._v("上面的 reflog 展示了从 main 分支签出(checkout)到 2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 "),s("code",[t._v("HEAD@{0}")]),t._v(" 标识.")]),t._v(" "),s("p",[t._v("如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前 main 上指向的提交(0254ea7)。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard 0254ea7\n")])])]),s("p",[t._v("然后使用 git reset 就可以把 main 改回到之前的 commit，这提供了一个在历史被意外更改情况下的安全网。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/BzdgZXyM1UaNCUCXySL9Rw",target:"_blank",rel:"noopener noreferrer"}},[t._v("45 个 Git 经典操作场景"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);