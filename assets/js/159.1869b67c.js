(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{2357:function(t,e,s){"use strict";s.r(e);var a=s(4),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("写这篇文章的原因")]),t._v(" "),a("p",[t._v("最近在做一些工程化相关的内容，有使用到 ·, 查看 Node.js 文档发现讲的一般！所以这里详细整理下,并且记得之前在 · 下直接使用命令创建软链通过 · 在想这两个参数位置有些怎么不一致呢？\n本文是我上一篇工程化系列文章中的一个小插曲,上篇文章 现代前端工程化-彻底搞懂基于 Monorepo 的 "),a("code",[t._v("lerna")]),t._v(" 模块(从原理到实战) 有提到软链接，那篇没有对软硬链接没有进行详细讲解，只是简单介绍了 "),a("code",[t._v("fs.symlink")]),t._v(" 中软链接创建的基本使用，本文进行详细展开下。\n软连接的创建应用场景还是比较广泛，比如 "),a("code",[t._v("npm link")]),t._v(" 调试， "),a("code",[t._v("leran")]),t._v(" 内部模块互相引用等等。")]),t._v(" "),a("h2",{attrs:{id:"inode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inode"}},[t._v("#")]),t._v(" inode")]),t._v(" "),a("p",[t._v("在讲解软/硬链接之前，先了解一个 "),a("code",[t._v("linux")]),t._v(" 系统中重要的概念 "),a("code",[t._v("inode")]),t._v(" 。众所周知，文件存储在硬盘上，硬盘的最小存储单位叫做 “扇区”（ "),a("code",[t._v("Sector")]),t._v(",每个扇区存储 "),a("code",[t._v("512")]),t._v(' 字节）.操作系统读取硬盘的时候，不会一个个扇区地读取，因为这样效率太低，而是一次性连续读取多个扇区,这种一次性读取的连续多个扇区就是"块"( '),a("code",[t._v("block")]),t._v(' )。这种由多个扇区组成的"块"，是文件存取的最小单位。"块"的大小，最常见的是 '),a("code",[t._v("4KB")]),t._v("，即连续八个 "),a("code",[t._v("sector")]),t._v(" 组成一个 "),a("code",[t._v("block")]),t._v("。")]),t._v(" "),a("p",[t._v("文件数据都储存在 "),a("code",[t._v('"块"')]),t._v(" 中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做 "),a("code",[t._v("inode")]),t._v(" ，中文译名为 "),a("code",[t._v('"索引节点"')]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("我们打开一个一个文件时，系统首先找到文件名对应的 "),a("code",[t._v("inode")]),t._v(" 号码，然后通过 "),a("code",[t._v("inode")]),t._v(" "),a("code",[t._v("号码获取inode")]),t._v(" 信息，然后根据 "),a("code",[t._v("inode")]),t._v(" 信息中的文件数据所在 "),a("code",[t._v("block")]),t._v(" 读出数据。")])]),t._v(" "),a("p",[t._v("上述概念的文章内容比较多，不太容易记忆，看图！")]),t._v(" "),a("figure",[a("img",{attrs:{src:s(839),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("h3",{attrs:{id:"inode-中包括了哪些内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inode-中包括了哪些内容"}},[t._v("#")]),t._v(" inode 中包括了哪些内容 ？")]),t._v(" "),a("p",[t._v("inode 包含文件的元信息，具体来说有以下内容：")]),t._v(" "),a("ol",[a("li",[t._v("文件的字节数")]),t._v(" "),a("li",[t._v("文件拥有者的"),a("code",[t._v("User ID")])]),t._v(" "),a("li",[t._v("文件的 "),a("code",[t._v("Group ID")])]),t._v(" "),a("li",[t._v("文件的读、写、执行权限")]),t._v(" "),a("li",[t._v("文件的时间戳，共有三个："),a("code",[t._v("ctime")]),t._v(" 指 "),a("code",[t._v("inode")]),t._v("上一次变动的时间，"),a("code",[t._v("mtime")]),t._v(" 指文件内容上一次变动的时间，"),a("code",[t._v("atime")]),t._v(" 指文件上一次打开的时间。")]),t._v(" "),a("li",[t._v("链接数，即有多少文件名指向这个 "),a("code",[t._v("inode")])]),t._v(" "),a("li",[t._v("文件数据 "),a("code",[t._v("block")]),t._v(" 的位置")])]),t._v(" "),a("h3",{attrs:{id:"linux-命令如何获取一个文件的-inode-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-命令如何获取一个文件的-inode-信息"}},[t._v("#")]),t._v(" linux 命令如何获取一个文件的 inode 信息")]),t._v(" "),a("p",[t._v("可以直接使用 "),a("code",[t._v("linux")]),t._v(" 命令 "),a("code",[t._v("stat")]),t._v(" 查看某个文件的 "),a("code",[t._v("inode")]),t._v(" 信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("stat example.js\n")])])]),a("p",[t._v("输出信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('koala node % stat example.js\n16777223 11904170 -rw-r--r-- 1 koala staff 0 0 "Mar 24 13:46:08 2021" "Mar 24 13:46:08 2021" "Mar 24 13:46:26 2021" "Mar 24 13:46:08 2021" 4096 0 0x40 example.js\n')])])]),a("h3",{attrs:{id:"node-js-中如何获取一个文件的-inode-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中如何获取一个文件的-inode-信息"}},[t._v("#")]),t._v(" Node.js 中如何获取一个文件的 inode 信息")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("Node.js")]),t._v(" 中，"),a("code",[t._v("fs")]),t._v(" 提供了 "),a("code",[t._v("stat")]),t._v(" 函数查看相关信息")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("statSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./example.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("输出信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("文件信息 Stats {\n  dev: 16777223,\n  mode: 33188,\n  nlink: 1,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 11904170,\n  size: 0,\n  blocks: 0,\n  atimeMs: 1616564768255.48,\n  mtimeMs: 1616564768255.48,\n  ctimeMs: 1616564786778.5532,\n  birthtimeMs: 1616564768255.48,\n  atime: 2021-03-24T05:46:08.255Z,\n  mtime: 2021-03-24T05:46:08.255Z,\n  ctime: 2021-03-24T05:46:26.779Z,\n  birthtime: 2021-03-24T05:46:08.255Z\n}\n")])])]),a("p",[t._v("每一个 "),a("code",[t._v("inode")]),t._v(" 都有一个唯一的标识码 ，上面的输出信息中 "),a("code",[t._v("ino")]),t._v(" 就是 "),a("code",[t._v("inode")]),t._v(" 的唯一标识码，在 "),a("code",[t._v("linux")]),t._v(" 系统内部使用 "),a("code",[t._v("inode")]),t._v(" 的标识码来识别文件，并不使用文件名。之前系的")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("linux")]),t._v(" 系统中，目录也是一种文件。目录文件包含一系列目录项，每一个目录项由两部分组成：所包含文件的文件名，以及文件名对应的 "),a("code",[t._v("inode")]),t._v(" 标识码。我们可以使用 "),a("code",[t._v("ls -i")]),t._v(" 来列出目录中的文件以及所有的 "),a("code",[t._v("inde")]),t._v(" 标识码。这里也可以解释可能小伙伴们觉得说不通的问题，仅修改目录的读权限，并不能实现读取目录下所有文件内容的原因，最后需要通过递归目录下的文件来进行修改。")]),t._v(" "),a("h2",{attrs:{id:"软链接与硬链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软链接与硬链接"}},[t._v("#")]),t._v(" 软链接与硬链接")]),t._v(" "),a("p",[t._v("什么是软链接(soft link,也叫符号链接)")]),t._v(" "),a("figure",[a("img",{attrs:{src:s(840),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("p",[t._v("软链接类似于 "),a("code",[t._v("Window")]),t._v(" 中的 “快捷方式” 。创建软链接会创建一个新的 "),a("code",[t._v("inode")]),t._v("，比如为文件 "),a("code",[t._v("a")]),t._v(" 创建了软链接文件 b，文件 "),a("code",[t._v("b")]),t._v(" 内部会指向 "),a("code",[t._v("a")]),t._v(" 的 "),a("code",[t._v("inode")]),t._v("。当我们读取文件"),a("code",[t._v("b")]),t._v("的时候，系统会自动导向文件 "),a("code",[t._v("a")]),t._v(" ，文件 "),a("code",[t._v("b")]),t._v(" 就是文件 "),a("code",[t._v("a")]),t._v(" 软连接(或者叫符号链接)。")]),t._v(" "),a("ul",[a("li",[t._v("访问：创建了软链接后我们就可以使用不同的文件名访问相同的内容，")]),t._v(" "),a("li",[t._v("修改：修改文件 "),a("code",[t._v("a")]),t._v(" 的内容，文件 "),a("code",[t._v("b")]),t._v(" 的内容也会发生改变，对文件内容的修改向放映到所有文件。")]),t._v(" "),a("li",[t._v("删除：当我们删除源文件 "),a("code",[t._v("a")]),t._v(" 时，在访问软连接文件 b 是，会报错 "),a("code",[t._v('"No such file or directory"')])])]),t._v(" "),a("p",[t._v("可以直接使用 "),a("code",[t._v("linux")]),t._v(" 命令 "),a("code",[t._v("ln -s source target")]),t._v(" 来创建软链接(注意：表示 "),a("code",[t._v("target")]),t._v(" “指向” "),a("code",[t._v("source")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ln -s ./target/a.js b.js\n")])])]),a("p",[t._v("执行 "),a("code",[t._v("shell")]),t._v(" 命令后，会出现 "),a("code",[t._v("b.js")]),t._v(" 文件，软链接创建成功。")]),t._v(" "),a("figure",[a("img",{attrs:{src:s(841),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("h3",{attrs:{id:"node-js-中创建软链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中创建软链接"}},[t._v("#")]),t._v(" Node.js 中创建软链接")]),t._v(" "),a("p",[t._v("基础用法\n"),a("code",[t._v("Node.js")]),t._v(" 官方文档提供了 "),a("code",[t._v("symlinkSync")]),t._v(" 函数创建软链接。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fs.symlinkSync(target,path,type)\n\ntarget <string> | <Buffer> | <URL>   // 目标文件\npath <string> | <Buffer> | <URL>  // 创建软链对应的地址\ntype <string>\n")])])]),a("p",[t._v("它会创建名为 "),a("code",[t._v("path")]),t._v(" 的链接，该链接指向 "),a("code",[t._v("target")]),t._v("。"),a("code",[t._v("type")]),t._v(" 参数仅在 "),a("code",[t._v("Windows")]),t._v(" 上可用，在其他平台上则会被忽略。它可以被设置为 "),a("code",[t._v("'dir'")]),t._v("、 "),a("code",[t._v("'file'")]),t._v(" 或 "),a("code",[t._v("'junction'")]),t._v("。如果未设置 "),a("code",[t._v("type")]),t._v(" 参数，则 "),a("code",[t._v("Node.js")]),t._v(" 将会自动检测 "),a("code",[t._v("target")]),t._v(" 的类型并使用 "),a("code",[t._v("'file'")]),t._v(" 或 "),a("code",[t._v("'dir'")]),t._v("。如果 "),a("code",[t._v("target")]),t._v(" 不存在，则将会使用 "),a("code",[t._v("'file'")]),t._v("。"),a("code",[t._v("Windows")]),t._v(" 上的连接点要求目标路径是绝对路径。当使用 "),a("code",[t._v("'junction'")]),t._v(" 时， "),a("code",[t._v("target")]),t._v(" 参数将会自动地标准化为绝对路径。")]),t._v(" "),a("ul",[a("li",[t._v("使用示例")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("symlinkSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./target/a.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./b.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("figure",[a("img",{attrs:{src:s(842),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("p",[t._v("这段代码的意思是为 创建一个软链接 "),a("code",[t._v("b.js")]),t._v(" 指向了文件 "),a("code",[t._v("./targert/a.js")]),t._v(",当 "),a("code",[t._v("a.js")]),t._v(" 中的内容发生变化时，"),a("code",[t._v("b.js")]),t._v(" 文件也会发生相同的改变。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("如果对目录创建软链接，方法中第三个参数需要传’dir’(虽然第三个参数只在 windows 下生效，这样传递可以确保跨平台不会出现问题): "),a("code",[t._v("fs.symlink(target,path,'dir')")])])]),t._v(" "),a("p",[t._v("上面讲解了 "),a("code",[t._v("linux")]),t._v(" 和"),a("code",[t._v("Node.js")]),t._v(" 创建软链接的两种方式，认真看的小伙伴可能发现问题，为什么 "),a("code",[t._v("Node.js")]),t._v(" 中 "),a("code",[t._v("fs.symlink(target,path)")]),t._v(" 和 "),a("code",[t._v("shell")]),t._v(" 命令中的 "),a("code",[t._v("ln -s source target")]),t._v(" 两个参数好像是反的呢，是不是会有这样的疑问？")]),t._v(" "),a("p",[t._v("其实如果前面的小例子你都尝试了，"),a("strong",[t._v('会发现后面传递的两个参数顺序实际是一致的，都是让后面新建的的"指向=>"前面的哦')]),t._v("！")]),t._v(" "),a("h3",{attrs:{id:"什么是硬链接-hard-link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是硬链接-hard-link"}},[t._v("#")]),t._v(" 什么是硬链接(hard link)")]),t._v(" "),a("figure",[a("img",{attrs:{src:s(843),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("p",[t._v('一般情况，一个文件名"唯一"对应一个 '),a("code",[t._v("inode")]),t._v("。但是 "),a("code",[t._v("linux")]),t._v(" 允许多个文件名都指向同一个 "),a("code",[t._v("inode")]),t._v('。表示我们可以使用不同对文件名访问同样的内容；对文件内容进行修改将放映到所有文件；删除一个文件不影响另一个文件对访问。这种机制就被称为"硬链接"')]),t._v(" "),a("p",[t._v("硬链接的创建\n可以直接使用 "),a("code",[t._v("linux")]),t._v(" 命令 "),a("code",[t._v("ln source target")]),t._v(" 来创建硬链接（注意："),a("code",[t._v("source")]),t._v(" 已存在的文件，target 是将要建立的链接）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ln ./target/a.js c.js\n")])])]),a("p",[t._v("执行 "),a("code",[t._v("shell")]),t._v(" 命令后，会出现"),a("code",[t._v("c.js")]),t._v(" 文件，硬链接创建成功。")]),t._v(" "),a("figure",[a("img",{attrs:{src:s(844),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("p",[t._v("与软连接不同，只能给文件建立硬链接，不能给目录建立硬链接。并且"),a("code",[t._v("source")]),t._v("文件必须存在，否则创建硬链接时会报错。")]),t._v(" "),a("p",[t._v("删除一个文件不会影响另一个文件的访问。原因是什么？实际上，文件 "),a("code",[t._v("inode")]),t._v(" 中还有一个链接数的信息，每多一个文件指向这个 "),a("code",[t._v("inode")]),t._v("，该数字就会加 "),a("code",[t._v("1")]),t._v("，每少一个文件指向这个 "),a("code",[t._v("inode")]),t._v("，该数字就会减 "),a("code",[t._v("1")]),t._v("，当值减到 "),a("code",[t._v("0")]),t._v("，系统就自动回收 "),a("code",[t._v("inode")]),t._v(" 及其对应的 "),a("code",[t._v("block")]),t._v(" 区域。很像是一种引用计数的垃圾回收机制。")]),t._v(" "),a("p",[t._v("当我们对某个文件建立了硬链接后，对应的 "),a("code",[t._v("inode")]),t._v(" 的链接数会是"),a("code",[t._v("2")]),t._v("（原文件本身已经有一个指向），当删除一个文件时，链接数变成"),a("code",[t._v("1")]),t._v("，并没达到回收的条件，所以我们还是可以访问文件。")]),t._v(" "),a("h3",{attrs:{id:"软链接与硬链接对比分析总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软链接与硬链接对比分析总结"}},[t._v("#")]),t._v(" 软链接与硬链接对比分析总结")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用 "),a("code",[t._v("ln source target")]),t._v(" 建立硬链接；使用 "),a("code",[t._v("ln -s source target")]),t._v(" 建立软链接")])]),t._v(" "),a("li",[a("p",[t._v("硬链接不会创建额外 "),a("code",[t._v("inode")]),t._v("，和源文件共用同一个 "),a("code",[t._v("inode")]),t._v("；软链接会创建额外一个文件（额外 "),a("code",[t._v("inode")]),t._v("），指向源文件的 "),a("code",[t._v("inode")])])]),t._v(" "),a("li",[a("p",[t._v("建立硬链接时，"),a("code",[t._v("source")]),t._v(" 必须存在且只能是文件；建立软链接时，"),a("code",[t._v("source")]),t._v(" 可以不存在而且可以是目录")])]),t._v(" "),a("li",[a("p",[t._v("删除源文件不会影响硬链接文件的访问（因为 "),a("code",[t._v("inode")]),t._v(" 还在）；删除源文件会影响软链接文件的访问（因为指向的 "),a("code",[t._v("inode")]),t._v(" 已经不存在了）")])]),t._v(" "),a("li",[a("p",[t._v("对于已经建立的同名链接，不能再次建立，除非删掉或者使用 "),a("code",[t._v("-f")]),t._v(" 参数")])])]),t._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("h3",{attrs:{id:"npm-link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-link"}},[t._v("#")]),t._v(" npm link")]),t._v(" "),a("p",[a("code",[t._v("npm link")]),t._v(" 的原理也是通过软链来实现的。当我们想要调试本地开发的 "),a("code",[t._v("npm")]),t._v(" 模块包(还没有发布或者修改了一些内容)时，需要使用 "),a("code",[t._v("npm link")]),t._v(" 来进行调试 举个例子:")]),t._v(" "),a("figure",[a("img",{attrs:{src:s(845),alt:""}}),a("figcaption",[t._v("章节配图")])]),t._v(" "),a("p",[t._v("有两个项目 "),a("code",[t._v("create-mono-repo")]),t._v(" 和 "),a("code",[t._v("create-mono-repo-testCli")]),t._v("在 "),a("code",[t._v("create-mono-repo")]),t._v(" 项目节点下执行 "),a("code",[t._v("npm link")]),t._v("成功后 ,在 "),a("code",[t._v("create-mono-repo-testCli")]),t._v(" 项目目录下执行 "),a("code",[t._v("npm link")]),t._v(" "),a("code",[t._v("create-mono-repo")]),t._v(" 这样就可以完成调试了")]),t._v(" "),a("h3",{attrs:{id:"lerna"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lerna"}},[t._v("#")]),t._v(" lerna")]),t._v(" "),a("p",[a("code",[t._v("lerna")]),t._v(" 创建的项目, "),a("code",[t._v("packages")]),t._v(" 目录下各模块互相依赖也是基于 "),a("code",[t._v("fs.symlinkSync")]),t._v(" 创建软链接实现的。")]),t._v(" "),a("p",[t._v("具体实现代码和地址如下:")]),t._v(" "),a("p",[t._v("源码对应地址\n"),a("a",{attrs:{href:"https://github.com/lerna/lerna/tree/main/utils/create-symlink",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/lerna/lerna/tree/main/utils/create-symlink"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSymbolicLink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("silly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'createSymbolicLink'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fs\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lstat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* nothing exists at destination */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("symlink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2011/12/inode.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于 inode 的讲解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[t._v("lerna 源码"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);