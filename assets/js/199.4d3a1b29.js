(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{2147:function(e,t,a){"use strict";a.r(t);var r=a(3),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("无论你是"),a("code",[e._v("React")]),e._v("、"),a("code",[e._v("Angular")]),e._v("、"),a("code",[e._v("Vue.js")]),e._v("，还是原生"),a("code",[e._v("JavaScript")]),e._v("开发者，你的代码都有可能成为黑客眼中的猎物。\n作为一个前端开发者，我们可能更加关注性能、"),a("code",[e._v("SEO")]),e._v("、"),a("code",[e._v("UI/UX")]),e._v("，往往会忽视安全问题。\n当你了解了大型框架是如何让你对 xss 攻击保持开放态度时，也许你会感觉到很意外。例如，"),a("code",[e._v("React")]),e._v("中的"),a("code",[e._v("dangerouslySetInnerHTML")]),e._v("或者"),a("code",[e._v("Angular")]),e._v("中的"),a("code",[e._v("bypassSecurityTrust")]),e._v("都是一些高危操作。\n我们需要记住，就安全而言，前端现在和后端、"),a("code",[e._v("DevOps")]),e._v("一样承担着相同的职责。前端也可能遭受到成千上万的恶意攻击。")]),e._v(" "),a("h2",{attrs:{id:"常见的攻击手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的攻击手段"}},[e._v("#")]),e._v(" 常见的攻击手段")]),e._v(" "),a("p",[e._v("让我们来了解一下常见的攻击类型有哪些。")]),e._v(" "),a("h3",{attrs:{id:"_1-任意文件上传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-任意文件上传"}},[e._v("#")]),e._v(" 1. 任意文件上传")]),e._v(" "),a("p",[e._v("这种攻击方式是将恶意文件上传到服务器中并执行，从而攻击系统。攻击包括：文件系统或者数据库超载、完全接管系统、将攻击转发到后端系统或者简单的破坏。")]),e._v(" "),a("h3",{attrs:{id:"_2-点击劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-点击劫持"}},[e._v("#")]),e._v(" 2. 点击劫持")]),e._v(" "),a("p",[e._v("这是一种诱导用户点击非本站网页或元素的攻击方式。这种攻击可能导致用户在不经意之间提供证书或者敏感信息，下载恶意软件，访问恶意网页，在线购买产品或者被偷偷转移资产。\n译者注：简单的说就是在用户观看到的网站上覆盖一层透明的恶意网站，诱导用户点击恶意网站上的按钮来触发攻击行为")]),e._v(" "),a("h3",{attrs:{id:"_3-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-xss-攻击"}},[e._v("#")]),e._v(" 3. XSS 攻击")]),e._v(" "),a("p",[e._v("这是一种将恶意脚本 JS 脚本注入到网页中的攻击方式。网站上的缺陷使这些攻击得以成功并广泛传播。")]),e._v(" "),a("h3",{attrs:{id:"_4-sql-注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-sql-注入"}},[e._v("#")]),e._v(" 4. SQL 注入")]),e._v(" "),a("p",[e._v("这是一种通过用户输入将恶意的 SQL 注入到数据库中，进而破坏数据库的攻击方式。")]),e._v(" "),a("h3",{attrs:{id:"_5-dos-攻击-拒绝服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-dos-攻击-拒绝服务"}},[e._v("#")]),e._v(" 5. Dos 攻击（拒绝服务）")]),e._v(" "),a("p",[e._v("这是一种通过流量轰炸服务器，导致正常的用户无法正常访问服务器的攻击方式。")]),e._v(" "),a("h3",{attrs:{id:"_6-中间人攻击或者会话劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-中间人攻击或者会话劫持"}},[e._v("#")]),e._v(" 6. 中间人攻击或者会话劫持")]),e._v(" "),a("p",[e._v("这是一种拦截客户端和服务端之间的通信，从中窃取用户的密码、账号或者任何个人详细信息的攻击方式。")]),e._v(" "),a("h2",{attrs:{id:"防范手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防范手段"}},[e._v("#")]),e._v(" 防范手段")]),e._v(" "),a("p",[e._v("攻击者将会不遗余力的在前端寻找安全漏洞，在本文中，我们将看到一些编写前端代码时安全相关的最佳实践。")]),e._v(" "),a("h3",{attrs:{id:"_1-严格的限制用户的输入-第一个攻击点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-严格的限制用户的输入-第一个攻击点"}},[e._v("#")]),e._v(" 1. 严格的限制用户的输入（第一个攻击点）")]),e._v(" "),a("p",[e._v("应该始终严格的对待用户输入，避免诸如 SQL 注入、点击劫持等等。因此，在将用户输入发送到服务端之前，校验并过滤用户输入是很重要的。\n可以通过删除或替换危险的字符来过滤数据，例如，使用白名单并转义输入的数据。\n但是，我意识到过滤和编码用户输入并不是一件容易的事，因此我们可以使用以下开源库：")]),e._v(" "),a("p",[e._v("DOMPurify.仅仅使用一个函数就可以过滤用户的输入。同时，也支持自定义的规则，并且支持在 HTML5、SVG、MathML 中使用。\nsecure-filters. 它提供方法去过滤 HTML、JavaScript、内联 CSS 等等。当你想利用用户的输入生成 JavaScript 或者 CSS 时，这个库特别好用。")]),e._v(" "),a("p",[e._v("如果是文件上传，请务必检查文件类型并且使用文件过滤功能仅允许某些文件类型上传。")]),e._v(" "),a("h3",{attrs:{id:"_2-注意隐藏保存浏览器内存中的数据或字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-注意隐藏保存浏览器内存中的数据或字段"}},[e._v("#")]),e._v(" 2. 注意隐藏保存浏览器内存中的数据或字段")]),e._v(" "),a("p",[e._v("如果我们利用"),a("code",[e._v('type="hidden"')]),e._v("来隐藏页面中敏感数据，或者把他们放到浏览器的"),a("code",[e._v("localStorage")]),e._v("、"),a("code",[e._v("sessionStorage")]),e._v("、"),a("code",[e._v("cookies")]),e._v("时，我们需要谨慎的考虑这些数据是否安全。\n攻击者可以轻松访问添加到浏览器中的所有内容。攻击者可以打开开发工具并更改所有保存在内存中的变量。如果你根据"),a("code",[e._v("localStorage")]),e._v("、"),a("code",[e._v("sessionStorage")]),e._v("、"),a("code",[e._v("cookies")]),e._v("中的值隐藏了身份验证界面，该怎么办？\n像"),a("a",{attrs:{href:"https://www.zaproxy.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ZapProxy"),a("OutboundLink")],1),e._v("这样的工具，可以在攻击者找到注入脚本的方法后，将这些值暴露给攻击者，然后攻击者可以使用它们进行进一步的攻击。\n因此，避免使用"),a("code",[e._v('type="hidden"')]),e._v("，避免将密钥、身份验证令牌等尽可能多的存到浏览器的内存中。")]),e._v(" "),a("h3",{attrs:{id:"_3-使用-csp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-csp"}},[e._v("#")]),e._v(" 3. 使用 CSP")]),e._v(" "),a("p",[e._v("永远不要相信服务器返回的所有内容，在 Http header 中定义一个强大的 CSP 策略，仅仅允许受信任的内容在浏览器中执行。\n最好有一个白名单列表，即使攻击者注入了脚本，该脚本和白名单不匹配，它也不会执行。\n举个例子:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// header\ncontent-security-policy: script-src ‘self’ https://apis.xyz.com\n")])])]),a("p",[e._v("这里定义我们的 Web 应用仅仅信任"),a("code",[e._v("https://apis.xyz.com")]),e._v("和本身域名的脚本。对于其他域名的资源都会在控制台中报错。\n你可以在"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN 网站"),a("OutboundLink")],1),e._v("上阅读更详细"),a("code",[e._v("CSP")]),e._v("说明。\n译者注：不仅可以在"),a("code",[e._v("header")]),e._v("中设置"),a("code",[e._v("csp")]),e._v("规则，你也可以在"),a("code",[e._v("meta")]),e._v("标签中设置。")]),e._v(" "),a("h3",{attrs:{id:"_4-开启-xss-保护模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-开启-xss-保护模式"}},[e._v("#")]),e._v(" 4. 开启 XSS 保护模式")]),e._v(" "),a("p",[e._v("如果攻击者通过某种方式在用户输入中插入攻击代码，我们可以通过"),a("code",[e._v('"X-XSS-Protection": "1; mode=block"')]),e._v("来告诉浏览器阻止响应。\n大多数现代浏览器默认情况下都启用了 XSS 保护模式，但仍建议添加"),a("code",[e._v("X-XSS-Protection")]),e._v("。 这有助于提高不支持"),a("code",[e._v("CSP")]),e._v("的旧版浏览器的安全性。")]),e._v(" "),a("h3",{attrs:{id:"_5-避免典型的-xss-错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-避免典型的-xss-错误"}},[e._v("#")]),e._v(" 5. 避免典型的 XSS 错误")]),e._v(" "),a("p",[e._v("Dom API "),a("code",[e._v("innerHTML")]),e._v("经常被用作"),a("code",[e._v("XSS")]),e._v("攻击的入口。例如：")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'.tagline'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" nameFromQueryString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("任何攻击者都可以使用上面的代码行注入恶意代码。\n大家可以考虑使用"),a("code",[e._v("textContent")]),e._v("来代替"),a("code",[e._v("innerHTML")]),e._v("，避免直接生成"),a("code",[e._v("HTML")]),e._v("。如果你不生成"),a("code",[e._v("HTML")]),e._v("，那就不会有"),a("code",[e._v("JavaScript")]),e._v("插入到页面中，即使你可以在页面中看到攻击代码，但是，什么也不会发生。\n密切关注"),a("a",{attrs:{href:"https://web.dev/trusted-types/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trusted Types"),a("OutboundLink")],1),e._v("("),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN 地址"),a("OutboundLink")],1),e._v(")，这是由 google 程序员开发出来的，旨在防范所有基于 DOM 的 XSS 攻击的方案。\n在 React.js 中，"),a("code",[e._v("dangerouslySetInnerHTML")]),e._v("可能产生和"),a("code",[e._v("innerHTML")]),e._v("类似的影响。\n注意：不要直接将用户输入做了"),a("code",[e._v("innerHTML")]),e._v("的值，尽量使用"),a("code",[e._v("textContent")]),e._v("。\n另外，我们应该正常的设置 http 响应头"),a("code",[e._v("Content-Type")]),e._v("和"),a("code",[e._v("X-Content-Type-Options")]),e._v("。例如，请勿将"),a("code",[e._v("JSON")]),e._v("数据编码成"),a("code",[e._v("text/HTML")]),e._v("，以免意外执行。")]),e._v(" "),a("h3",{attrs:{id:"_6-禁用-iframe-嵌入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-禁用-iframe-嵌入"}},[e._v("#")]),e._v(" 6. 禁用 IFrame 嵌入")]),e._v(" "),a("p",[e._v("禁用"),a("code",[e._v("iframe")]),e._v("可以帮助我们免受点击劫持攻击。我们应该在 header 中添加"),a("code",[e._v('"X-Frame-Options": "DENY"')]),e._v("，来禁止浏览器在页面中渲染"),a("code",[e._v("iframe")]),e._v("。\n我们也可以使用 CSP 指令"),a("code",[e._v("frame-ancestors")]),e._v("，它可以更好的控制我们的页面可以被哪些父页面通过"),a("code",[e._v("iframe")]),e._v("的形式来嵌套展示。")]),e._v(" "),a("h3",{attrs:{id:"_7-通用的错误提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-通用的错误提示"}},[e._v("#")]),e._v(" 7. 通用的错误提示")]),e._v(" "),a("p",[e._v('类似"您的密码有误"这样的提示对用户很友好，同时，他对攻击者也很友好。他们可以通过服务端返回的错误信息来判断他下一步需要进行什么样的攻击。\n当处理用户的账号、邮件、个人信息时，我们应该尝试使用一些模棱两可的错误提示，类似“错误的登陆信息”。')]),e._v(" "),a("h3",{attrs:{id:"_8-使用验证码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-使用验证码"}},[e._v("#")]),e._v(" 8. 使用验证码")]),e._v(" "),a("p",[e._v("在对外的公共服务（登陆、注册）上使用验证码。验证码的目的在于帮助我们区分真人和机器人，并且也可以阻止 DoS 攻击。")]),e._v(" "),a("h3",{attrs:{id:"_9-设置referrer-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-设置referrer-policy"}},[e._v("#")]),e._v(" 9. 设置"),a("code",[e._v("Referrer-Policy")])]),e._v(" "),a("p",[e._v("当我们使用"),a("code",[e._v("<a>")]),e._v("标签或者超链接引导用户离开我们的网站时，确保你在请求 header 里面添加了"),a("code",[e._v('"Referrer-Policy": "no-referrer"')]),e._v("，或者在"),a("code",[e._v("<a>")]),e._v("标签中添加了"),a("code",[e._v('rel="noopener"')]),e._v(" 或"),a("code",[e._v('rel="noreferrer"')]),e._v("属性。\n当我们不设置"),a("code",[e._v("header")]),e._v("或者"),a("code",[e._v("rel")]),e._v("属性时，目标网站就可以获取到一些用户相关的数据。\n译者注："),a("code",[e._v("rel=noopener")]),e._v("保证跳转过去的网站无法通过 window.opener 窃取原来网页的信息。"),a("code",[e._v("rel=noreferrer")]),e._v("作用是防止将引用者信息传递到目标网站。上面提到的策略大家可以去 mdn 上了解一下"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN Referrer-Policy"),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN Link Type"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_10-限制浏览器的功能或者-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-限制浏览器的功能或者-api"}},[e._v("#")]),e._v(" 10. 限制浏览器的功能或者 API")]),e._v(" "),a("p",[e._v("就像"),a("code",[e._v("CSP")]),e._v("可以限制可信的资源域名一样，我们也可以限制浏览器提供哪些能力给我们用。我们可以利用 http header 中的"),a("code",[e._v("Feature-Policy")]),e._v("字段来限制使用浏览器提供的功能。\n提示：禁用一切你不使用的功能\n译者注："),a("code",[e._v("Feature-Policy")]),e._v("是一个实验中的"),a("code",[e._v("header")]),e._v("属性，目前在"),a("code",[e._v("chrome")]),e._v("浏览器中的兼容性尚可，"),a("code",[e._v("IE")]),e._v("和"),a("code",[e._v("Safari")]),e._v("都不支持。具体可以在"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN Feature-Policy"),a("OutboundLink")],1),e._v("中了解。")]),e._v(" "),a("h3",{attrs:{id:"_11-定期审查-npm-依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-定期审查-npm-依赖"}},[e._v("#")]),e._v(" 11. 定期审查 npm 依赖")]),e._v(" "),a("p",[e._v("经常跑一下"),a("code",[e._v("npm audit")]),e._v("来获取存在漏洞的 npm 包列表，升级他们避免一些安全问题。\n"),a("code",[e._v("GitHub")]),e._v("现在会标记出哪些存在漏洞的依赖。我们也可以使用"),a("code",[e._v("Snyk")]),e._v("来自动检查你的源码，并且自动升级版本号。")]),e._v(" "),a("h3",{attrs:{id:"_12-分离你的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-分离你的应用"}},[e._v("#")]),e._v(" 12. 分离你的应用")]),e._v(" "),a("p",[e._v("与后端一样，我们也拥有微服务架构，其中，将单一的 Web 应用转变为多个小型前端应用的聚合，每个小型前端应用可以单独运行。\n相同的原理可以应用于前端。 例如，一个 Web 应用可以分为公共部分，身份验证部分和后台管理部分，每个应用都托管在单独的子域中，例如"),a("code",[e._v("https://public.example.com")]),e._v("、"),a("code",[e._v("https://users.example.com")]),e._v("和"),a("code",[e._v("https://admin.example.com")]),e._v("。这将减少 web 应用中的漏洞。\n注意：适当的分隔还可以防止应用程序公共部分出现 XSS 漏洞，从而防止它自动破坏用户信息。")]),e._v(" "),a("h3",{attrs:{id:"_13-尽量避免使用第三方服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-尽量避免使用第三方服务"}},[e._v("#")]),e._v(" 13. 尽量避免使用第三方服务")]),e._v(" "),a("p",[e._v("一行代码就可以使用类似"),a("code",[e._v("Google Analytics")]),e._v("的第三方服务，同时，也可能会给你的应用带来漏洞。想一想这些第三方服务脚本被篡改的情况。\n拥有一套健全的"),a("code",[e._v("CSP")]),e._v("策略很重要。大多数第三方服务都有定义的"),a("code",[e._v("CSP")]),e._v("指令，因此请务必添加它们。\n同样，如果可能的话，请确保给你的"),a("code",[e._v("script")]),e._v("标签都加上"),a("code",[e._v("integrity")]),e._v("属性。子资源完整性功能（"),a("code",[e._v("SRI")]),e._v("）可以验证脚本的"),a("code",[e._v("hash")]),e._v("值，并确保其未被篡改。")]),e._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("script")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("https://example.com/example-framework.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("integrity")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/ux..."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("crossorigin")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("anonymous"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),a("p",[e._v("译者注：将使用"),a("code",[e._v("base64编码")]),e._v("过后的文件哈希值写入你所引用的 "),a("code",[e._v("<script>")]),e._v(" 或 "),a("code",[e._v("<link>")]),e._v(" 标签的 integrity 属性值中即可启用子资源完整性校验功能。")]),e._v(" "),a("h3",{attrs:{id:"仔细考虑自动填充字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#仔细考虑自动填充字段"}},[e._v("#")]),e._v(" 仔细考虑自动填充字段")]),e._v(" "),a("p",[e._v("存储在浏览器的自动填充里面的用户个人数据对用户和攻击者都很方便。\n攻击者添加了第三方的脚本，利用浏览器的自动填充来提取用户的邮箱地址去构建追踪标识。他们可以使用这些信息建立用户浏览历史记录配置文件，然后将其出售给坏人。\n我们许多人甚至都不知道他们的浏览器自动填充功能存储了哪些信息。")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("提示：")]),e._v(" "),a("p",[e._v("禁止将敏感信息自动填入表单")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5ebe9bcee51d454d945368b2",target:"_blank",rel:"noopener noreferrer"}},[e._v("让 Web 应用更安全的 13 个小技巧"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);